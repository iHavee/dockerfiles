name: libtorrent-rasterbar RC_2_0

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'version'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [linux/386, linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/ppc64le, linux/s390x]
      max-parallel: 7
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prepare
        run: |
          IMAGE_NAME=libtorrent-rasterbar
          VERSION=${{ github.event.input.version }}
          VERSION=${VERSION:-2.0.3}
          TAGS=${{ matrix.architecture }}
          TAGS=gists/${IMAGE_NAME}:${TAGS//\//-}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=build_args::VERSION=${VERSION}
          echo ::set-output name=image-name::${IMAGE_NAME}
          echo ::set-output name=tags::${TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ steps.prepare.outputs.image-name }}
          file: ./${{ steps.prepare.outputs.image-name }}/Dockerfile
          platforms: ${{ matrix.architecture }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tags }}

  manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub Registry
        run: |
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}
          echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      - name: Manifest create
        if: success()
        run: |
          # experimental features
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker manifest create \
            gists/libtorrent-rasterbar:${{ needs.build.outputs.version }} \
            gists/libtorrent-rasterbar:linux-386 \
            gists/libtorrent-rasterbar:linux-amd64 \
            gists/libtorrent-rasterbar:linux-arm64 \
            gists/libtorrent-rasterbar:linux-arm-v7 \
            gists/libtorrent-rasterbar:linux-arm-v6 \
            gists/libtorrent-rasterbar:linux-ppc64le \
            gists/libtorrent-rasterbar:linux-s390x
          docker manifest create \
            gists/libtorrent-rasterbar:latest \
            gists/libtorrent-rasterbar:linux-386 \
            gists/libtorrent-rasterbar:linux-amd64 \
            gists/libtorrent-rasterbar:linux-arm64 \
            gists/libtorrent-rasterbar:linux-arm-v7 \
            gists/libtorrent-rasterbar:linux-arm-v6 \
            gists/libtorrent-rasterbar:linux-ppc64le \
            gists/libtorrent-rasterbar:linux-s390x
      - name: Manifest push
        if: success()
        run: |
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker manifest push gists/libtorrent-rasterbar:${{ needs.build.outputs.version }}
          docker manifest push gists/libtorrent-rasterbar:latest
      - name: Clear
        if: always()
        run: |
          rm -rf ${HOME}/.docker/config.json
